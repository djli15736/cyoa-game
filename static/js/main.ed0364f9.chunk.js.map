{"version":3,"sources":["components/PowerViewer.tsx","components/PointBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PowerViewer","power","points","setPoints","useState","selected","setSelected","selectPower","Cost","className","Body","Title","Name","Text","Description","Button","onClick","PointBox","id","App","Container","Col","Row","CardGroup","POWERS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAKO,SAASA,EAAT,GAA6H,IAAvGC,EAAsG,EAAtGA,MAAOC,EAA+F,EAA/FA,OAAQC,EAAuF,EAAvFA,UACxC,EAA+BC,oBAAkB,GAAjD,mBAAMC,EAAN,KAAgBC,EAAhB,KAUA,SAASC,IAHLJ,EAIGE,EAJOH,EAAOD,EAAMO,KAJbN,EAAOD,EAAMO,MAgB3B,OAAO,cAAC,IAAD,CAAeC,UAAWJ,EAAW,iCAAmC,yBAAxE,SACC,eAAC,IAAcK,KAAf,WACI,cAAC,IAAcC,MAAf,UAAsBV,EAAMW,OAC5B,eAAC,IAAcC,KAAf,WACI,kDADJ,IACmCZ,EAAMa,eAEzC,eAAC,IAAcD,KAAf,WACI,2CADJ,IAC4BZ,EAAMO,QAElC,cAACO,EAAA,EAAD,CAAQC,QAAS,WAAKT,IAAeD,GAAaD,IAAlD,yB,0CC7BT,SAASY,EAAT,GAA4D,IAAzCf,EAAwC,EAAxCA,OAEtB,OAAO,cAAC,IAAD,CAAeO,UAAU,oBAAzB,SACC,eAAC,IAAcC,KAAf,WACI,cAAC,IAAcG,KAAf,CAAoBK,GAAG,YAAvB,SAAmC,0DADvC,IACiGhB,OCyC9FiB,MAvCf,WACE,MAA4Bf,mBAAS,IAArC,mBAAOF,EAAP,KAAeC,EAAf,KAEA,OAEE,eAACiB,EAAA,EAAD,CAAWX,UAAU,MAArB,UACE,cAACY,EAAA,EAAD,UACA,cAAC,IAAD,CAAeZ,UAAU,2BAAzB,SACM,eAAC,IAAcC,KAAf,WACI,cAAC,IAAcC,MAAf,2BACA,cAAC,IAAcE,KAAf,+aAOV,eAACS,EAAA,EAAD,WACA,eAACC,EAAA,EAAD,WACA,cAACvB,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,OAE1D,eAACoB,EAAA,EAAD,WACA,cAACvB,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,OAE1D,eAACoB,EAAA,EAAD,WACA,cAACvB,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,IAC1D,cAACH,EAAD,CAAaC,MAAOuB,EAAO,GAAItB,OAAQA,EAAQC,UAAWA,UAG1D,cAACc,EAAD,CAAUf,OAAQA,QC/BTuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ed0364f9.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { Button, Card as BootstrapCard, Col } from 'react-bootstrap';\r\nimport { Power } from '../interfaces/power';\r\n\r\n\r\nexport function PowerViewer({power, points, setPoints}: {power: Power, points: number, setPoints: (p: number)=>void}): JSX.Element {\r\n    const[selected, setSelected] = useState<boolean>(false);\r\n    \r\n    const subtractPoints = () => {\r\n        setPoints(points-power.Cost);\r\n    };\r\n\r\n    const addPoints = () => {\r\n        setPoints(points+power.Cost);\r\n    };\r\n\r\n    function selectPower(){\r\n        if(selected) {\r\n            addPoints();\r\n        }\r\n        else {\r\n            subtractPoints();\r\n        }\r\n     }\r\n\r\n    return <BootstrapCard className={selected ? \"power-card-clicked border-dark\" : \"power-card border-dark\"}>\r\n            <BootstrapCard.Body>\r\n                <BootstrapCard.Title>{power.Name}</BootstrapCard.Title>\r\n                <BootstrapCard.Text>\r\n                    <strong>Description:</strong> {power.Description}\r\n                </BootstrapCard.Text>\r\n                <BootstrapCard.Text>\r\n                    <strong>Cost:</strong> {power.Cost}\r\n                </BootstrapCard.Text>\r\n                <Button onClick={()=>{selectPower(); setSelected(!selected)}}>Select</Button> \r\n            </BootstrapCard.Body>\r\n        </BootstrapCard>\r\n}","import { useState } from 'react';\r\nimport { Button, Card as BootstrapCard, Col } from 'react-bootstrap';\r\nimport { Power } from '../interfaces/power';\r\n\r\n\r\nexport function PointBox({points}: {points: number}): JSX.Element {\r\n\r\n    return <BootstrapCard className=\"point-box bg-info\">\r\n            <BootstrapCard.Body>\r\n                <BootstrapCard.Text id=\"point-box\"><strong>Points Remaining: </strong></BootstrapCard.Text> {points}\r\n            </BootstrapCard.Body>\r\n        </BootstrapCard>\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport POWERS from './assets/powers.json';\nimport { PowerViewer } from './components/PowerViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Col, Container, Row, Card as BootstrapCard, CardGroup } from 'react-bootstrap';\nimport { Power } from './interfaces/power';\nimport { PointBox } from './components/PointBox';\n\n\n\nfunction App(): JSX.Element {\n  const [points, setPoints] = useState(70); \n\n  return (\n\n    <Container className=\"App\">\n      <Col>\n      <BootstrapCard className=\"card border-dark bg-info\">\n            <BootstrapCard.Body>\n                <BootstrapCard.Title>Introduction</BootstrapCard.Title>\n                <BootstrapCard.Text>So yeah, you got hit by a truck and died. Fortunately for you, I'm really bored and have been looking to watch a new Isekai!\n                  Oh, you don't know what that is? I'll be sending you off to another world with some superpowers and will be watching your adventures. I can't make you too powerful \n                  though, or it won't be any fun. That's why I'm giving you 70 points that you can use to pick your own powers. Good luck!\n                </BootstrapCard.Text>\n            </BootstrapCard.Body>\n      </BootstrapCard>\n      </Col>\n      <Row>\n      <CardGroup>\n      <PowerViewer power={POWERS[0]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[1]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[2]} points={points} setPoints={setPoints}></PowerViewer>\n      </CardGroup>\n      <CardGroup>\n      <PowerViewer power={POWERS[3]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[4]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[5]} points={points} setPoints={setPoints}></PowerViewer>\n      </CardGroup>\n      <CardGroup>\n      <PowerViewer power={POWERS[6]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[7]} points={points} setPoints={setPoints}></PowerViewer>\n      <PowerViewer power={POWERS[8]} points={points} setPoints={setPoints}></PowerViewer>\n      </CardGroup>\n      </Row>\n      <PointBox points={points}></PointBox>\n      </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}